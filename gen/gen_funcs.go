//go:build gen

package main

import (
	"bytes"
	"context"
	"go/format"
	"log"
	"os"
	"sort"
	"text/template"
	"time"

	"github.com/jo3-l/yagfuncdata"
)

var tmpl = template.Must(template.New("").Parse(`// Code generated by gen/gen_funcs.go; DO NOT EDIT.
package main

import (
	"github.com/jonas747/template"
)

var funcs = template.FuncMap{
{{ range $funcName := . -}}
	"{{ $funcName }}": func() interface{} { return nil },
{{ end }}
}
`))

func main() {
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()

	sources := yagfuncdata.DefaultSources(yagfuncdata.DefaultFileContentProvider)
	funcNames, err := yagfuncdata.Fetch(ctx, sources)
	if err != nil {
		log.Fatalln("could not retrieve list of template functions: ", err)
	}

	sort.Strings(funcNames)
	var buf bytes.Buffer
	err = tmpl.Execute(&buf, funcNames)
	if err != nil {
		log.Fatalln("failed executing template: ", err)
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatalln("failed formatting generated code: ", err)
	}

	file, err := os.Create("funcs_generated.go")
	if err != nil {
		log.Fatalln("failed creating file:", err)
	}
	defer file.Close()

	_, err = file.Write(formatted)
	if err != nil {
		log.Fatalln("failed writing to file")
	}

	log.Println("successfully generated function map")
}
