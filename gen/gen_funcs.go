// +build ignore
package main

import (
	"bytes"
	"encoding/json"
	"go/format"
	"log"
	"os"
	"text/template"
)

type FuncData struct {
	Name     string `json:"name"`
	NumIn    int    `json:"num_in"`
	Variadic bool   `json:"variadic"`
}

var funcs = template.FuncMap{
	"seq":  func(n int) []struct{} { return make([]struct{}, n) },
	"sub1": func(n int) int { return n - 1 },
}

var tmpl = template.Must(template.New("").Funcs(funcs).Parse(`// Code generated by gen/gen_funcs.go; DO NOT EDIT.
package main

import (
	"github.com/jonas747/template"
)

var funcs = template.FuncMap{
{{range $data := .}}
	{{- $fun := "func ("}}
	{{- range $i, $v := seq .NumIn}}
		{{- if gt $i 0}}
			{{- $fun = print $fun ", "}}
		{{- end}}
		{{- if and (eq $i (sub1 $data.NumIn)) $data.Variadic}}
			{{- $fun = print $fun "..."}}
		{{- end}}
		{{- $fun = print $fun "interface{}" -}}
	{{- end}}
	{{- $fun = print $fun ") string { return \"\" },"}}
	{{- print "\t\"" .Name "\": " $fun}}
{{end}}
}
`))

func main() {
	funcs, err := os.ReadFile("./funcs.json")
	if err != nil {
		log.Fatal("error reading funcs file: ", err)
	}

	var funcData []*FuncData
	err = json.Unmarshal(funcs, &funcData)
	if err != nil {
		log.Fatal("failed unmarshalling json for funcs: ", err)
	}

	funcNames := make(map[string]struct{})
	for _, data := range funcData {
		funcNames[data.Name] = struct{}{}
	}

	builtins, err := os.ReadFile("./builtin_funcs.json")
	if err != nil {
		log.Fatal("error reading builtin funcs file: ", err)
	}
	var builtinData []*FuncData
	err = json.Unmarshal(builtins, &builtinData)
	if err != nil {
		log.Fatal("failed unmarshalling json for builtin funcs: ", err)
	}

	for _, data := range builtinData {
		if _, ok := funcNames[data.Name]; !ok {
			funcData = append(funcData, data)
		}
	}

	var buf bytes.Buffer
	err = tmpl.Execute(&buf, funcData)
	if err != nil {
		log.Fatal("failed executing template: ", err)
	}

	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		log.Fatal("failed formatting generated code: ", err)
	}

	file, err := os.Create("funcs_generated.go")
	if err != nil {
		log.Fatal("failed creating file:", err)
	}
	defer file.Close()

	_, err = file.Write(formatted)
	if err != nil {
		log.Fatal("failed writing to file")
	}
}
